{"version":3,"sources":["store/index.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","api.ts","components/Buttons/Buttons.tsx","App.tsx","index.tsx"],"names":["setTodos","todos","type","sortTodos","sortType","loadingStatus","state","isLoading","getTodos","initialState","sorter","array","sort","a","b","title","localeCompare","user","name","Number","completed","store","createStore","action","filter","todo","id","composeWithDevTools","TodoItem","dispatch","useDispatch","className","style","backgroundColor","onClick","TodoList","map","key","getData","url","fetch","response","json","result","data","Buttons","App","todoList","useSelector","loadTodos","users","preparedTodos","find","userId","length","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae498fa3.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { PreparedTodo } from '../components/Interfaces/Interfaces';\n\nconst TOGGLE_LOADING = 'TOGGLE_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst SORT = 'SORT';\nconst REMOVE = 'REMOVE';\n\nexport const toggleLoading = () => ({ type: TOGGLE_LOADING });\nexport const setTodos = (todos: PreparedTodo[]) => ({ type: SET_TODOS, todos });\nexport const sortTodos = (sortType: string) => ({ type: SORT, sortType });\nexport const removeTodo = (id: number) => ({ type: REMOVE, id });\n\nexport const loadingStatus = (state: RootState) => state.isLoading;\nexport const getTodos = (state: RootState) => state.todos;\n\nexport type RootState = {\n  isLoading: boolean;\n  todos: PreparedTodo[];\n};\n\nconst initialState: RootState = {\n  isLoading: false,\n  todos: [],\n};\n\nconst sorter = (sortType: string, array: PreparedTodo[]) => {\n  switch (sortType) {\n    case 'by title':\n      return [...array].sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'by name':\n      return [...array].sort((a, b) => {\n        if (a.user && b.user) {\n          return a.user.name.localeCompare(b.user.name);\n        }\n\n        return 0;\n      });\n\n    case 'by completed':\n      return [...array].sort((a, b) => Number(b.completed) - Number(a.completed));\n\n    default:\n      return array;\n  }\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case TOGGLE_LOADING:\n      return { ...state, isLoading: !state.isLoading };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SORT:\n      return {\n        ...state,\n        todos: sorter(action.sortType, state.todos),\n      };\n\n    case REMOVE:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeTodo } from '../../store/index';\nimport { PreparedTodo } from '../Interfaces/Interfaces';\n\nimport './TodoItem.scss';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"todo__item-wrapper\" style={{ backgroundColor: `${todo.completed ? 'green' : 'red'}` }}>\n      <span className=\"todo__item-name\">{todo.user?.name}</span>\n      <p className=\"todo__item-title\">{todo.title}</p>\n      <button\n        onClick={() => dispatch(removeTodo(todo.id))}\n        type=\"button\"\n        className=\"remove-btn\"\n      >\n        Remove\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { PreparedTodo } from '../Interfaces/Interfaces';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport './TodoList.scss';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"todo__list list\">\n    {todos.map(todo => (\n      <li\n        className=\"list__item\"\n        key={todo.id}\n      >\n        <TodoItem todo={todo} />\n      </li>\n    ))}\n  </ul>\n);\n","export const usersURL = 'https://mate.academy/students-api/users';\nexport const todosURL = 'https://mate.academy/students-api/todos';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const result = await response.json();\n\n  return result.data;\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { sortTodos } from '../../store/index';\n\nimport './Buttons.scss';\n\nexport const Buttons: React.FC<{}> = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"todo__buttons\">\n      <button\n        className=\"btn\"\n        type=\"button\"\n        onClick={() => dispatch(sortTodos('by title'))}\n      >\n        Sort by title\n      </button>\n      <button\n        className=\"btn\"\n        type=\"button\"\n        onClick={() => dispatch(sortTodos('by name'))}\n      >\n        Sort by name\n      </button>\n      <button\n        className=\"btn\"\n        type=\"button\"\n        onClick={() => dispatch(sortTodos('by completed'))}\n      >\n        Show completed first\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getTodos,\n  toggleLoading,\n  loadingStatus,\n  setTodos,\n} from './store/index';\nimport { Todo, User, PreparedTodo } from './components/Interfaces/Interfaces';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getData, usersURL, todosURL } from './api';\nimport { Buttons } from './components/Buttons/Buttons';\n\nconst App: React.FC<{}> = () => {\n  const todoList = useSelector(getTodos);\n\n  const isLoading = useSelector(loadingStatus);\n\n  const dispatch = useDispatch();\n\n  const loadTodos = async () => {\n    dispatch(toggleLoading());\n    const todos = await getData<Todo[]>(todosURL);\n    const users = await getData<User[]>(usersURL);\n    const preparedTodos: PreparedTodo[] = todos.map((todo) => (\n      {\n        ...todo,\n        user: users.find((user) => user.id === todo.userId),\n      }\n    ));\n\n    dispatch(setTodos(preparedTodos));\n    dispatch(toggleLoading());\n  };\n\n  return (\n    <div className=\"todo\">\n      <h1>Dynamic list of todos</h1>\n      {\n        todoList.length\n          ? (\n            <div>\n              <Buttons />\n              <TodoList todos={todoList} />\n            </div>\n          )\n          : (\n            <button\n              className=\"btn\"\n              type=\"button\"\n              onClick={loadTodos}\n              disabled={isLoading}\n            >\n              {`${isLoading ? 'Loading...' : 'Load'}`}\n            </button>\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}